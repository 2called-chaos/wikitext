/** \file
 *  This C header file was generated by $ANTLR version 3.0.1
 *
 *     -  From the grammar source file : WikiText.g
 *     -                            On : 2007-10-16 01:51:25
 *     -                 for the lexer : WikiTextLexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 * View this file with tabs set to 8 (:set ts=8 in gvim) and indent at 4 (:set sw=4 in gvim)
 *
 * The lexer WikiTextLexerhas the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pWikiTextLexer, which is returned from a call to WikiTextLexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the entry points are provided anyway.
 * * The entry points for WikiTextLexer are  as follows:
 *
 *  - void      pWikiTextLexer->PRE(pWikiTextLexer)
 *  - void      pWikiTextLexer->NO_WIKI_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->NO_WIKI_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->BLOCKQUOTE(pWikiTextLexer)
 *  - void      pWikiTextLexer->STRONG_EM(pWikiTextLexer)
 *  - void      pWikiTextLexer->STRONG(pWikiTextLexer)
 *  - void      pWikiTextLexer->EM(pWikiTextLexer)
 *  - void      pWikiTextLexer->TT_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->TT_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->OL(pWikiTextLexer)
 *  - void      pWikiTextLexer->UL(pWikiTextLexer)
 *  - void      pWikiTextLexer->H6(pWikiTextLexer)
 *  - void      pWikiTextLexer->H5(pWikiTextLexer)
 *  - void      pWikiTextLexer->H4(pWikiTextLexer)
 *  - void      pWikiTextLexer->H3(pWikiTextLexer)
 *  - void      pWikiTextLexer->H2(pWikiTextLexer)
 *  - void      pWikiTextLexer->H1(pWikiTextLexer)
 *  - void      pWikiTextLexer->H6_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->H5_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->H4_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->H3_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->H2_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->H1_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->H6_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->H5_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->H4_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->H3_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->H2_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->H1_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->URI(pWikiTextLexer)
 *  - void      pWikiTextLexer->HTTP(pWikiTextLexer)
 *  - void      pWikiTextLexer->FTP(pWikiTextLexer)
 *  - void      pWikiTextLexer->SVN(pWikiTextLexer)
 *  - void      pWikiTextLexer->URI_CHARS(pWikiTextLexer)
 *  - void      pWikiTextLexer->SPECIAL_URI_CHARS(pWikiTextLexer)
 *  - void      pWikiTextLexer->LINK_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->LINK_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->EXT_LINK_START(pWikiTextLexer)
 *  - void      pWikiTextLexer->EXT_LINK_END(pWikiTextLexer)
 *  - void      pWikiTextLexer->SEPARATOR(pWikiTextLexer)
 *  - void      pWikiTextLexer->SPACE(pWikiTextLexer)
 *  - void      pWikiTextLexer->ENTITY(pWikiTextLexer)
 *  - void      pWikiTextLexer->NAMED_ENTITY(pWikiTextLexer)
 *  - void      pWikiTextLexer->HEX_ENTITY(pWikiTextLexer)
 *  - void      pWikiTextLexer->DECIMAL_ENTITY(pWikiTextLexer)
 *  - void      pWikiTextLexer->QUOT(pWikiTextLexer)
 *  - void      pWikiTextLexer->AMP(pWikiTextLexer)
 *  - void      pWikiTextLexer->LESS(pWikiTextLexer)
 *  - void      pWikiTextLexer->GREATER(pWikiTextLexer)
 *  - void      pWikiTextLexer->CRLF(pWikiTextLexer)
 *  - void      pWikiTextLexer->PRINTABLE(pWikiTextLexer)
 *  - void      pWikiTextLexer->DEFAULT(pWikiTextLexer)
 *  - void      pWikiTextLexer->Tokens(pWikiTextLexer)
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 * 
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
#ifndef	_WikiTextLexer_H
#define _WikiTextLexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */

#ifdef	WIN32
// Disable: Unreferenced parameter,                - Rules with parameters that are not used
//          constant conditional,                  - ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable        - tree rewrite vairables declared but not needed
//          Unreferenced local variable            - lexer rulle decalres but does not always use _type
//          potentially unitialized variable used  - retval always returned from a rule 
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */



/** Context tracking structure for WikiTextLexer
 */
typedef struct WikiTextLexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;

    void (*mPRE)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mNO_WIKI_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mNO_WIKI_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mBLOCKQUOTE)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mSTRONG_EM)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mSTRONG)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mEM)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mTT_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mTT_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mOL)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mUL)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH6)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH5)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH4)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH3)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH2)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH1)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH6_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH5_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH4_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH3_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH2_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH1_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH6_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH5_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH4_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH3_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH2_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mH1_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mURI)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mHTTP)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mFTP)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mSVN)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mURI_CHARS)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mSPECIAL_URI_CHARS)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mLINK_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mLINK_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mEXT_LINK_START)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mEXT_LINK_END)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mSEPARATOR)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mSPACE)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mENTITY)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mNAMED_ENTITY)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mHEX_ENTITY)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mDECIMAL_ENTITY)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mQUOT)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mAMP)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mLESS)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mGREATER)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mCRLF)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mPRINTABLE)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mDEFAULT)	(struct WikiTextLexer_Ctx_struct * ctx);
    void (*mTokens)	(struct WikiTextLexer_Ctx_struct * ctx);






































    unsigned char * (*getGrammarFileName)();
    void	    (*free)   (struct WikiTextLexer_Ctx_struct * ctx);
        
}
    WikiTextLexer, * pWikiTextLexer;

/* Function protoypes for the lexer functions that external translation units
 * may wish to call.
 */
ANTLR3_API pWikiTextLexer WikiTextLexerNew         (pANTLR3_INPUT_STREAM     instream);/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define PRE      6
#define TT_END      14
#define P      4
#define TT_START      13
#define H1_END      34
#define ENTITY      50
#define H6      17
#define URI      40
#define H2_END      33
#define H2_START      27
#define BLOCKQUOTE      9
#define H5_END      30
#define LESS      53
#define NO_WIKI_START      7
#define H3      20
#define UL      16
#define LINK_START      41
#define H6_END      29
#define AMP      52
#define GREATER      54
#define H1      22
#define LINK_END      42
#define HTTP      35
#define H6_START      23
#define H2      21
#define SPACE      46
#define H5_START      24
#define URI_CHARS      38
#define PRINTABLE      56
#define NAMED_ENTITY      47
#define LI      5
#define CRLF      55
#define H4      19
#define H3_END      32
#define H5      18
#define HEX_ENTITY      48
#define FTP      36
#define NO_WIKI_END      8
#define H3_START      26
#define H4_END      31
#define EXT_LINK_END      44
#define DECIMAL_ENTITY      49
#define SEPARATOR      45
#define H4_START      25
#define H1_START      28
#define EOF      -1
#define OL      15
#define Tokens      58
#define STRONG_EM      10
#define DEFAULT      57
#define EXT_LINK_START      43
#define SPECIAL_URI_CHARS      39
#define SVN      37
#define QUOT      51
#define EM      12
#define STRONG      11
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

/* End of token definitions for WikiTextLexer
 * =============================================================================
 */
/** \} */

#endif
/* END - Note:Keep extra linefeed to satisfy UNIX systems */
